---
AWSTemplateFormatVersion: 2010-09-09

Description: EKSWSV1

Parameters:
  EksClusterName:
    Type: String
    Description: The name of the EKS cluster created
    Default: simple-jwt-api
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  GitSourceRepo:
    Type: String
    Description: GitHub source repository - must contain a Dockerfile and buildspec.yml in the base
    Default: CI_CD_Pipeline
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository name

  GitBranch:
    Type: String
    Default: master
    Description: GitHub git repository branch - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository branch name

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub API token - see https://github.com/blog/1509-personal-api-tokens
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub personal access token

  GitHubUser:
    Type: String
    Default: JustinKeeJoonHong
    Description: GitHub username or organization
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub username or organization

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:4.0
    Description: AWS CodeBuild Docker optimized image
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  KubectlRoleName:
    Type: String
    Default: UdacityFlaskDeployCBKubectlRole
    Description: IAM role used by kubectl to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a kubectl IAM role

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub
        Parameters:
          - GitHubUser
          - GitHubToken
          - GitSourceRepo
          - GitBranch
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
      - Label:
          default: IAM
        Parameters:
          - KubectlRoleName
      - Label:
          default: EKS
        Parameters:
          - EksClusterName
    ParameterLabels:
      GitHubUser:
        default: Username
      GitHubToken:
        default: Access token
      GitSourceRepo:
        default: Repository
      GitBranch:
        default: Branch
      CodeBuildDockerImage:
        default: Docker image
      KubectlRoleName:
        default: kubectl IAM role
      EksClusterName:
        default: EKS cluster name

Resources:
  EcrDockerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import time
          import boto3
          import logging
          import cfnresponse
          from botocore.exceptions import ClientError

          client = boto3.client('sagemaker')


          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      handle_create(event, context)
                  elif event['RequestType'] == 'Update':
                      handle_update(event, context)
                  elif event['RequestType'] == 'Delete':
                      handle_delete(event, context)
              except ClientError as exception:
                  logging.error(exception)
                  cfnresponse.send(event, context, cfnresponse.FAILED,
                                  {}, error=str(exception))


          def handle_create(event, context):
              print("**Starting running the SageMaker workshop setup code")
              resource_config = event['ResourceProperties']

              print("**Creating studio domain")
              response_data = create_studio_domain(resource_config)
              cfnresponse.send(event, context, cfnresponse.SUCCESS,
                              {'DomainId': response_data['DomainId']}, physicalResourceId=response_data['DomainId'])


          def handle_delete(event, context):
              print('Received delete event')
              domain_id = event['PhysicalResourceId']
              try:
                  client.describe_domain(DomainId=domain_id)
              except ClientError as exception:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                  {}, physicalResourceId=event['PhysicalResourceId'])
                  return
              delete_domain(domain_id)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {},
                              physicalResourceId=event['PhysicalResourceId'])


          def handle_update(event, context):
              logging.info('Received Update event')
              domain_id = event['PhysicalResourceId']
              default_user_settings = event['ResourceProperties']['DefaultUserSettings']
              update_domain(domain_id, default_user_settings)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'DomainId' : domain_id},
                              physicalResourceId=event['PhysicalResourceId'])


          def create_studio_domain(config):
              vpc_id = config['VPC']
              subnet_ids = config['SubnetIds']
              default_user_settings = config['DefaultUserSettings']
              domain_name = config['DomainName']

              response = client.create_domain(
                  DomainName=domain_name,
                  AuthMode='IAM',
                  DefaultUserSettings=default_user_settings,
                  SubnetIds=subnet_ids.split(','),
                  VpcId=vpc_id
              )

              domain_id = response['DomainArn'].split('/')[-1]
              created = False
              while not created:
                  response = client.describe_domain(DomainId=domain_id)
                  time.sleep(5)
                  if response['Status'] == 'InService':
                      created = True

              logging.info("**SageMaker domain created successfully: %s", domain_id)
              return response


          def delete_domain(domain_id):
              response = client.delete_domain(
                  DomainId=domain_id,
                  RetentionPolicy={
                      'HomeEfsFileSystem': 'Delete'
                  }
              )
              deleted = False
              while not deleted:
                  try:
                      client.describe_domain(DomainId=domain_id)
                  except ClientError as error:
                      if error.response['Error']['Code'] == 'ResourceNotFound':
                          print('Deleted')
                          deleted = True
                          return
                  time.sleep(5)
              return response


          def update_domain(domain_id, default_user_settings):
              response = client.update_domain(
                  DomainId=domain_id,
                  DefaultUserSettings=default_user_settings
              )
              updated = False
              while not updated:
                  response = client.describe_domain(DomainId=domain_id)
                  if response['Status'] == 'InService':
                      updated = True
                  else:
                      logging.info('Updating .. %s', response['Status'])
                  time.sleep(5)
              return response

      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 300

  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:UpdateAssumeRolePolicy

  KubectlAssumeRoleCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      KubectlRoleName: !Ref KubectlRoleName
      CodeBuildServiceRoleArn: !GetAtt CodeBuildServiceRole.Arn
    DependsOn:
      - CustomResourceLambda
      - CodeBuildServiceRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
    DependsOn: CodePipelineArtifactBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - eks:Describe*
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: "*"
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref GitSourceRepo
          - Name: REPOSITORY_BRANCH
            Value: !Ref GitBranch
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterName
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
        PrivilegedMode: true
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
    DependsOn: KubectlAssumeRoleCustomResource

  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitSourceRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn: CodeBuildProject
